basePath: /
definitions:
  gorm.DeletedAt:
    properties:
      time:
        type: string
      valid:
        description: Valid is true if Time is not NULL
        type: boolean
    type: object
  models.User:
    properties:
      admin:
        type: boolean
      createdAt:
        type: string
      deletedAt:
        $ref: '#/definitions/gorm.DeletedAt'
      email:
        type: string
      id:
        type: integer
      name:
        type: string
      password:
        type: string
      updatedAt:
        type: string
    type: object
host: localhost:8080
info:
  contact: {}
  title: Users API documentation
  version: 1.0.0
paths:
  /auth/delete-user/{id}:
    delete:
      consumes:
      - application/json
      description: Delete user by Id
      parameters:
      - description: User ID
        in: path
        name: id
        required: true
        type: string
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/models.User'
        "400":
          description: Bad Request
          schema:
            type: object
        "500":
          description: Internal Server Error
          schema:
            type: object
      security:
      - ApiKeyAuth: []
      summary: Delete user by Id
      tags:
      - Users
  /auth/token:
    get:
      description: Validate user token
      responses:
        "200":
          description: OK
          schema:
            items:
              $ref: '#/definitions/models.User'
            type: array
        "401":
          description: Unauthorized
          schema:
            type: object
      security:
      - ApiKeyAuth: []
      summary: Validate user token
      tags:
      - Token
  /auth/token/admin:
    get:
      description: Validate admin token
      responses:
        "200":
          description: OK
          schema:
            items:
              $ref: '#/definitions/models.User'
            type: array
        "401":
          description: Unauthorized
          schema:
            type: object
      security:
      - ApiKeyAuth: []
      summary: Validate admin token
      tags:
      - Token
  /auth/update-user/{id}:
    put:
      consumes:
      - application/json
      description: Update user by Id
      parameters:
      - description: User ID
        in: path
        name: id
        required: true
        type: string
      - description: User Data
        in: body
        name: user
        required: true
        schema:
          $ref: '#/definitions/models.User'
      responses:
        "201":
          description: Created
          schema:
            $ref: '#/definitions/models.User'
        "400":
          description: Bad Request
          schema:
            type: object
        "500":
          description: Internal Server Error
          schema:
            type: object
      security:
      - ApiKeyAuth: []
      summary: Update user by Id
      tags:
      - Users
  /auth/upload:
    post:
      consumes:
      - multipart/form-data
      description: Upload file
      parameters:
      - description: Upload file
        in: formData
        name: myFile
        required: true
        type: file
      produces:
      - application/json
      responses:
        "200":
          description: ok
          schema:
            type: string
        "400":
          description: Bad Request
          schema:
            type: object
        "500":
          description: Internal Server Error
          schema:
            type: object
      security:
      - ApiKeyAuth: []
      summary: Upload file
      tags:
      - Users
  /auth/users:
    get:
      description: get all users
      responses:
        "200":
          description: OK
          schema:
            items:
              $ref: '#/definitions/models.User'
            type: array
        "404":
          description: Not Found
          schema:
            type: object
      security:
      - ApiKeyAuth: []
      summary: Get all users
      tags:
      - Users
  /login:
    post:
      consumes:
      - application/json
      description: Login user
      parameters:
      - description: User Data
        in: body
        name: user
        required: true
        schema:
          $ref: '#/definitions/models.User'
      responses:
        "200":
          description: OK
          schema:
            type: object
        "400":
          description: Bad Request
          schema:
            type: object
        "500":
          description: Internal Server Error
          schema:
            type: object
      summary: Login user based on paramters
      tags:
      - Users
  /register:
    post:
      consumes:
      - application/json
      description: Register new user
      parameters:
      - description: User Data
        in: body
        name: user
        required: true
        schema:
          $ref: '#/definitions/models.User'
      responses:
        "200":
          description: OK
          schema:
            type: object
        "400":
          description: Bad Request
          schema:
            type: object
        "500":
          description: Internal Server Error
          schema:
            type: object
      summary: Register new user based on paramters
      tags:
      - Users
securityDefinitions:
  ApiKeyAuth:
    in: header
    name: x-access-token
    type: apiKey
swagger: "2.0"
